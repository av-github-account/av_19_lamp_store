from fastapi import HTTPException
from sqlalchemy.orm import Session

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from app.models.order_model import Order
from app.models.order_item_model import OrderItem
from app.models.product_model import Product

from app.schemas.order_schema import OrderCreate  # –≤–∞—à–∞ Pydantic-—Å—Ö–µ–º–∞

def create_order(db: Session, data: OrderCreate) -> Order:
    # 1) –°–æ–∑–¥–∞—ë–º —Å–∞–º –∑–∞–∫–∞–∑ (–±–µ–∑ –ø–æ–∑–∏—Ü–∏–π –∏ —Ü–µ–Ω)
    order = Order(
        customer_name=data.customer_name,
        customer_email=data.customer_email,
        customer_phone=data.customer_phone,
        delivery_address=data.delivery_address,
        comment=data.comment,
        status=data.status
    )
    db.add(order)
    db.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å order.id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    total_amount = 0.0

    for item_in in data.items:
        # 2) –ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ —Ü–µ–Ω—É –∏–∑ –ë–î
        product = db.query(Product).filter(Product.id == item_in.product_id).first()
        if not product:
            raise HTTPException(404, f"Product {item_in.product_id} not found")

        # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if item_in.quantity > product.stock_quantity:
            raise HTTPException(
                400,
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.id}: "
                f"–∏–º–µ–µ—Ç—Å—è {product.stock_quantity}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ {item_in.quantity}"
            )

        # 4) –°–æ–∑–¥–∞—ë–º –ø–æ–∑–∏—Ü–∏—é –∑–∞–∫–∞–∑–∞ —Å —Ü–µ–Ω–æ–π –∏–∑ –ë–î
        order_item = OrderItem(
            order_id=order.id,
            product_id=product.id,
            quantity=item_in.quantity,
            unit_price=product.price  # —Ü–µ–Ω—É –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–∑ product.price
        )
        db.add(order_item)

        # 5) –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ
        total_amount += product.price * item_in.quantity
        product.stock_quantity -= item_in.quantity

    # 6) –§–∏–∫—Å–∏—Ä—É–µ–º –æ–±—â—É—é —Å—É–º–º—É –Ω–∞ –∑–∞–∫–∞–∑–µ
    order.total_price = total_amount

    db.commit()
    db.refresh(order)
    return order




# from sqlalchemy.orm import Session
# from datetime import datetime

# from app.models.order_model import Order, OrderItem, OrderStatusEnum
# from app.schemas.order_schema import OrderCreate, OrderUpdate


# # ===== üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ order_name =====
# def generate_order_name(db: Session) -> str:
#     today_str = datetime.utcnow().strftime("%Y%m%d")
#     last_order = (
#         db.query(Order)
#         .filter(Order.order_name.like(f"ORD-{today_str}-%"))
#         .order_by(Order.id.desc())
#         .first()
#     )
#     number = 1
#     if last_order:
#         try:
#             last_number = int(last_order.order_name.split("-")[-1])
#             number = last_number + 1
#         except ValueError:
#             pass  # fallback if order_name is malformed
#     return f"ORD-{today_str}-{number:04d}"


# # ===== –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ =====
# def create_order(db: Session, data: OrderCreate):
#     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
#     order_name = generate_order_name(db)

#     # –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø–æ –∑–∞–∫–∞–∑—É
#     total_price = sum(item.quantity * item.unit_price for item in data.items)

#     order = Order(
#         order_name=order_name,
#         customer_name=data.customer_name,
#         customer_email=data.customer_email,
#         customer_phone=data.customer_phone,
#         delivery_address=data.delivery_address,
#         total_price=total_price,
#         comment=data.comment,
#         status=OrderStatusEnum.NEW,  # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
#     )

#     db.add(order)
#     db.flush()  # –ø–æ–ª—É—á–∏—Ç—å order.id –¥–æ –∫–æ–º–º–∏—Ç–∞

#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
#     for item in data.items:
#         db_item = OrderItem(
#             order_id=order.id,
#             product_id=item.product_id,
#             quantity=item.quantity,
#             unit_price=item.unit_price,
#         )
#         db.add(db_item)

#     db.commit()
#     db.refresh(order)
#     return order


# # ===== –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑ =====
# def get_order(db: Session, order_id: int):
#     return db.query(Order).filter(Order.id == order_id).first()


# # ===== –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã =====
# def get_all_orders(db: Session):
#     return db.query(Order).all()


# # ===== –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ =====
# def update_order(db: Session, order_id: int, data: OrderUpdate):
#     order = get_order(db, order_id)
#     if not order:
#         return None

#     for field, value in data.dict(exclude_unset=True).items():
#         setattr(order, field, value)

#     db.commit()
#     db.refresh(order)
#     return order


# # ===== –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (PATCH) =====
# def cancel_order(db: Session, order_id: int):
#     order = get_order(db, order_id)
#     if not order:
#         return None
#     order.status = OrderStatusEnum.CANCELLED

#     db.commit()
#     return {"message": "Order cancelled"}
